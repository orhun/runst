name: Continuous Integration

on:
  push:
    branches:
      - main
      - staging # for bors
      - trying # for bors
  pull_request:
    branches:
      - main
  schedule:
    - cron: "0 0 * * 0"

jobs:
  build:
    name: Build
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            --no-install-recommends \
            --allow-unauthenticated \
            libdbus-1-dev \
            libglib2.0-dev \
            libpango1.0-dev \
            pkg-config

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Cache Cargo dependencies
        uses: Swatinem/rust-cache@v2

      - name: Build the project
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --locked --verbose

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            --no-install-recommends \
            --allow-unauthenticated \
            libdbus-1-dev \
            libglib2.0-dev \
            libpango1.0-dev \
            pkg-config

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Check formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Run clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

      - name: Run cargo-deny
        uses: EmbarkStudios/cargo-deny-action@v2
        with:
          command: check licenses sources

      - name: Run cargo-audit
        uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run committed
        uses: crate-ci/committed@master
        with:
          args: "-vv"
          commits: "HEAD"

      - name: Run lychee
        uses: lycheeverse/lychee-action@v1
        with:
          args: -v *.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run codespell
        uses: codespell-project/actions-codespell@master
        with:
          check_filenames: true
          check_hidden: true
          ignore_words_file: .codespellignore
          skip: target,.git

      - name: Run cargo-msrv
        shell: bash
        run: |
          curl -s 'https://api.github.com/repos/foresterre/cargo-msrv/releases' | \
            jq -r "[.[] | select(.prerelease == false)][0].assets[] | \
            select(.name | ascii_downcase | test(\"linux.*x86_64|x86_64.*linux\")).browser_download_url" | \
            wget -qi -
          tar -xvf cargo-msrv*.tar* -C  ~/.cargo/bin/ cargo-msrv
          printf "%s" "Checking MSRV for $package..."
          cargo msrv --output-format json verify | tail -n 1 | jq --exit-status '.success'
